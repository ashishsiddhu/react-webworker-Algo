{"version":3,"sources":["logo.svg","Star.js","App.js","reportWebVitals.js","index.js"],"names":["response","ShowTost","myData","useState","showData","setShowData","Container","Button","onClick","size","Toast","onClose","style","margin","className","Header","Body","ShowAlert","Alert","variant","Heading","Star","count","setCount","hoverCount","setHoverCount","currentId","setCurrentId","useEffect","fetchData","a","fetch","ok","json","console","log","c","status","getColor","i","id","cursor","arr","push","icon","faStar","name","color","e","onMouseEnter","onMouseLeave","filterData","length","map","padding","textAlign","title","LazyComponent","React","lazy","ThreadComponent","App","useHistory","enable","setEnable","Jumbotron","fallback","to","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.750f208d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState, Suspense } from \"react\";\r\n// import Child  from \"./Child\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { Button, Toast, Jumbotron, Container, Alert } from 'react-bootstrap';\r\nlet response = {};\r\n\r\nconst ShowTost = ({ myData }) => {\r\n    const [showData, setShowData] = useState(false);\r\n    return (<Container>\r\n        <Button onClick={() => setShowData(true)} size={'sm'}>Show Toast</Button>\r\n        {showData &&\r\n            <Toast onClose={() => setShowData(false)} style={{ margin: \"auto\" }} className={\"mt-2\"}>\r\n                <Toast.Header>\r\n                    <strong className=\"mr-auto\">React-Bootstrap</strong>\r\n                </Toast.Header>\r\n                <Toast.Body>{myData}</Toast.Body>\r\n            </Toast>\r\n        }\r\n    </Container>\r\n    )\r\n}\r\n\r\nconst ShowAlert = ({ myData }) => {\r\n    const [showData, setShowData] = useState(false);\r\n    return (<Container>\r\n        <Button onClick={() => setShowData(true)} size={\"sm\"} className={\"mt-2\"}>Show Alert</Button>\r\n        {showData &&\r\n            <Alert style={{ margin: \"auto\" }} variant=\"success\" className={\"mt-2\"}>\r\n                <Alert.Heading>\r\n                    <strong className=\"mr-auto\">React-Bootstrap</strong>\r\n                </Alert.Heading>\r\n                <p>{myData}</p>\r\n                <hr />\r\n                <div className=\"d-flex justify-content-end\">\r\n                    <Button onClick={() => setShowData(false)} variant=\"outline-success\">\r\n                        Close me y'all!\r\n                </Button>\r\n                </div>\r\n            </Alert>\r\n        }\r\n    </Container>\r\n    )\r\n}\r\n\r\nfunction Star() {\r\n    const [count, setCount] = useState(0);\r\n    const [hoverCount, setHoverCount] = useState(0);\r\n    const [showData, setShowData] = useState([]);\r\n    const [currentId, setCurrentId] = useState(1);\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n\r\n    }, [count])\r\n    const fetchData = async () => {\r\n        // import(\"./ThreadComponent\").then((result)=>{\r\n        //     console.log(result.updateValue(1));\r\n        // })\r\n        try {\r\n            let myData = await fetch(\"https://jsonplaceholder.typicode.com/todos/\" + currentId);\r\n            if (myData.ok) {\r\n                response = await myData.json();\r\n                console.log(\"response>>\", response);\r\n                setShowData([...showData, response]);\r\n                setCurrentId(c => c + 1);\r\n            } else {\r\n                console.log(\"eeee>>\", myData.status);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Error>>\", e)\r\n        }\r\n    }\r\n    const getColor = (i) => {\r\n        if (count > i || hoverCount > i) {\r\n            return \"yellow\"\r\n        } else {\r\n            return \"grey\"\r\n        }\r\n    }\r\n\r\n    const filterData = () => {\r\n        let arr = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            arr.push(\r\n                <FontAwesomeIcon icon={faStar} name=\"ratingStar\"\r\n                    style={{ color: getColor(i) }}\r\n                    onClick={(e) => setCount(i + 1)}\r\n                    onMouseEnter={(e) => setHoverCount(i + 1)}\r\n                    onMouseLeave={(e) => setHoverCount(0)}\r\n                    key={i}\r\n                />\r\n            );\r\n        }\r\n        return arr;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div id=\"myStar\" style={{ cursor: \"pointer\" }}>\r\n                {filterData()}\r\n            </div>\r\n            {count}\r\n            \r\n            <ShowTost myData={\"This is my Tost data from Star.js\"}></ShowTost>\r\n            <ShowAlert myData={\"This is my Alert data from Star.js\"}></ShowAlert>\r\n            <p className={\"mt-3 mb-1\"}>\r\n                <Button onClick={() => fetchData()} variant=\"danger\" size={'sm'}>Fetch Random Data</Button>\r\n            </p>\r\n            <h3>MyData: </h3>\r\n            {showData.length &&\r\n                <table>\r\n                    <tbody>\r\n                        {showData.map((a, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <td style={{ padding: \"0 4rem\" }}>{a.id}</td>\r\n                                    <td style={{ textAlign: \"left\" }}>{a.title}</td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n// Star.propTypes = {\r\n//     count: PropTypes.number,\r\n//     rating: PropTypes.number,\r\n// }\r\n// Star.defaultProps = {\r\n//     count: 5,\r\n//     rating: 0\r\n// }\r\n\r\nexport default Star;","import React, { Suspense, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch, useHistory, Link } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Star from \"./Star\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Jumbotron, Container } from 'react-bootstrap';\n\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\nconst ThreadComponent = React.lazy(() => import('./ThreadComponent'));\nfunction App() {\n  const history = useHistory();\n  const [enable, setEnable] = useState(false);\n  return (\n    <Container className=\"App\">\n        <h4>WebWorker / Lazy Loading / Start Component / BootStrap Demo </h4>\n        <Jumbotron className={\"pt-4\"}>\n            <Button size={'sm'} onClick={() => setEnable(true)} className={'m-2'} variant={\"success\"}>Lazy Load WebWorker Component</Button>\n            {enable > 0 &&\n              <Suspense fallback={<div>Loading...</div>}>\n                 <ThreadComponent />\n              </Suspense>\n            }\n            {/* <Star /> */}\n            <Router>\n                <div>\n                  <Link to=\"/star\">Load Star Component</Link>\n                </div>\n                <Link to=\"/lazyLoad\">Lazy Load</Link>\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Switch>\n                        <Route exact path=\"/lazyLoad\" component={LazyComponent} />\n                        <Route path=\"/star\" component={Star} />\n                    </Switch>\n                </Suspense>\n            </Router>\n        </Jumbotron>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}